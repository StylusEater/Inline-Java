=head1 NAME

Inline::Java::PerlInterpreter - How to call Perl from Java using Inline::Java.

=head1 SYNOPSIS

=for comment

   import org.perl.inline.java.* ;

   class HelpMePerl {
      InlineJavaPerlInterpreter pi = null ;

      public HelpMePerl() throws InlineJavaException {
      }

      private boolean matches(String target, String pattern){
        Boolean b = (Boolean)pi.eval("'" + target + "' =~ /" + pattern + "/", Boolean.class) ;
        return b.booleanValue() ;
      }

      public static void main(String args[])
	     throws InlineJavaPerlException, InlineJavaException {
         pi = InlineJavaPerlInterpreter.getInstance() ;

         String target = "aaabbbccc" ;
         String pattern = "ab+" ;
         boolean ret = matches(target, pattern) ;

         System.out.println(
           target + (ret ? " matches " : " doesn't match ") + pattern) ;
      }
   }

=for comment


=head1 DESCRIPTION

The C<org.perl.inline.java.InlineJavaPerlInterpreter> Java class allows
you to call or evaluate Perl code from a Java program. It is implemented
using C<Inline::Java> JNI callbacks. No preprocessing of the Java source
code is required.


=head1 USING THE org.perl.inline.java.InlineJavaPerlInterpreter CLASS

B<Installation>

Before using C<org.perl.inline.java.InlineJavaPerlInterpreter>, you must
have installed C<Inline::Java> as well as the JNI extension. Additionally,
the PerlInterpreter extension must also have been installed.

B<>

This section will explain the different ways to C<use> Inline::Java.
For more details on C<Inline>, see 'perldoc Inline'.

B<Basic Usage>

The most basic form for using C<Inline::Java> is:

   use Inline Java => 'Java source code' ;

Of course, you can use Perl's "here document" style of quoting to make
the code slightly easier to read:

   use Inline Java => <<'END';

      Java source code goes here.

   END

The source code can also be specified as a filename, a subroutine
reference (sub routine should return source code), or an array
reference (array contains lines of source code). This information
is detailed in 'perldoc Inline'.

In order for C<Inline::Java> to function properly, it needs to know
where to find a Java 2 SDK on your machine. This is done using one
of the following techniques:

   - set the J2SDK configuration option to the correct directory
   - set the PERL_INLINE_JAVA_J2SDK environment variable to the
     correct directory

If none of these are specified, C<Inline::Java> will use the Java
2 SDK that was specified a install time (see below).


=head1 SEE ALSO

L<Inline::Java>, L<Inline::Java::Callbacks>.
   Z<>


=head1 BUGS AND DEFICIENCIES

Here are some things to watch out for:

=over 4

=item 1

You shouldn't name any of your classes 'B', 'S', 'I', 'J', 'F', 'D',
'C', 'Z' or 'L'. These classes seem to be used internally by Java to
represent the primitive types.

=item 2

If you upgrade C<Inline::Java> from a previous version, be sure to delete
your _Inline directory so that C<Inline::Java>'s own Java classes get
rebuilt to match the Perl code.

=back

=head1 AUTHOR

Patrick LeBoutillier <patl@cpan.org> is the author of Inline::Java.
   Z<>


=head1 COPYRIGHT

Copyright (c) 2001-2004, Patrick LeBoutillier.

All Rights Reserved. This module is free software. It may be used,
redistributed and/or modified under the terms of the Perl Artistic
License. See http://www.perl.com/perl/misc/Artistic.html for more
details.

=cut
